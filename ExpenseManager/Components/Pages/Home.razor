@page "/home"
@using ExpenseManager.Components.Layout
@using Components.Model
@using System.Text.Json
@using Components.Utilities
@using System.Diagnostics

<link href="app-tailwind.css" rel="stylesheet" />
<div class="mt-[350px] min-h-screen bg-gray-50 p-6">
    <h1 class="mb-8 text-3xl font-bold text-gray-800">Dashboard</h1>

    <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4">
        <!-- Total Income -->
        <div class="transform rounded-xl border border-gray-200 bg-white p-6 shadow-lg transition-all hover:scale-105">
            <p class="mb-2 text-lg font-bold text-gray-700">Total Income</p>
            <p class="text-2xl font-bold text-green-600">@income</p>
        </div>

        <!-- Total Expense -->
        <div class="transform rounded-xl border border-gray-200 bg-white p-6 shadow-lg transition-all hover:scale-105">
            <p class="mb-2 text-lg font-bold text-gray-700">Total Expense</p>
            <p class="text-2xl font-bold text-red-600">@expense</p>
        </div>

        <!-- Debts -->
        <div class="transform rounded-xl border border-gray-200 bg-white p-6 shadow-lg transition-all hover:scale-105">
            <p class="mb-2 text-lg font-bold text-gray-700">Debts</p>
            <p class="text-2xl font-bold text-orange-600">@debt</p>
        </div>

        <!-- Cleared Debt -->
        <div class="transform rounded-xl border border-gray-200 bg-white p-6 shadow-lg transition-all hover:scale-105">
            <p class="mb-2 text-lg font-bold text-gray-700">Cleared Debt</p>
            <p class="text-2xl font-bold text-blue-600">@clearedDebt</p>
        </div>

        <!-- Pending Debts -->
        <div class="transform rounded-xl border border-gray-200 bg-white p-6 shadow-lg transition-all hover:scale-105">
            <p class="mb-2 text-lg font-bold text-gray-700">Pending Debts</p>
            <p class="text-2xl font-bold text-yellow-600">@pendingDebt</p>
        </div>

        <!-- Total Balance -->
        <div class="transform rounded-xl border border-gray-200 bg-white p-6 shadow-lg transition-all hover:scale-105">
            <p class="mb-2 text-lg font-bold text-gray-700">Total Balance</p>
            <p class="text-2xl font-bold text-purple-600">@balance</p>
        </div>

        <!-- Total Transactions -->
        <div class="transform rounded-xl border border-gray-200 bg-white p-6 shadow-lg transition-all hover:scale-105">
            <p class="mb-2 text-lg font-bold text-gray-700">Total Transactions</p>
            <p class="text-2xl font-bold text-indigo-600">@totalTransactions</p>
        </div>
    </div>
    <!-- Transaction Overview -->
    <div class="mt-8 rounded-xl border border-gray-200 bg-white p-6 shadow-lg">
        <p class="mb-4 text-lg font-bold text-gray-700">Transaction Overview</p>
        <!-- Income -->
        <div class="flex justify-between gap-4 mb-4">
            <button class="w-1/2 rounded-lg bg-green-100 px-6 py-3 font-semibold text-green-600 shadow hover:bg-green-200">
                Highest Income: @highestInflow?.Amount
            </button>
            <button class="w-1/2 rounded-lg bg-green-100 px-6 py-3 font-semibold text-green-600 shadow hover:bg-green-200">
                Lowest Income: @lowestInflow?.Amount
            </button>
        </div>
        <!-- Expense -->
        <div class="flex justify-between gap-4 mb-4">
            <button class="w-1/2 rounded-lg bg-green-100 px-6 py-3 font-semibold text-green-600 shadow hover:bg-green-200">
                Highest Expense: @highestOutflow?.Amount
            </button>
            <button class="w-1/2 rounded-lg bg-green-100 px-6 py-3 font-semibold text-green-600 shadow hover:bg-green-200">
                Lowest Expense: @lowestOutflow?.Amount
            </button>
        </div>
        <!-- Debt -->
        <div class="flex justify-between gap-4">
            <button class="w-1/2 rounded-lg bg-green-100 px-6 py-3 font-semibold text-green-600 shadow hover:bg-green-200">
                Highest Debt: @highestDebt?.Amount
            </button>
            <button class="w-1/2 rounded-lg bg-green-100 px-6 py-3 font-semibold text-green-600 shadow hover:bg-green-200">
                Lowest Debt: @lowestDebt?.Amount
            </button>
        </div>
    </div>

    <!-- Date Range Filter -->
    <div class="mt-8 rounded-xl border border-gray-200 bg-white p-6 shadow-lg">
        <p class="mb-4 text-lg font-bold text-gray-700">Filter Pending Debts by Date Range</p>
        <div class="flex flex-wrap gap-4">
            <input type="date" @bind="startDate" class="rounded-lg border border-gray-300 p-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200" placeholder="Start Date" />
            <input type="date" @bind="endDate" class="rounded-lg border border-gray-300 p-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-200" placeholder="End Date" />
        </div>
    </div>

    <!-- Filtered Pending Debts -->
    <div class="mt-8 rounded-xl border border-gray-200 bg-white p-6 shadow-lg">
        <p class="mb-4 text-lg font-bold text-gray-700">Filtered Pending Debts</p>
        @if (filteredPendingDebts.Any())
        {
            <div class="overflow-x-auto">
                <table class="w-full border-collapse rounded-lg bg-white">
                    <thead>
                        <tr class="bg-gray-50">
                            <th class="border-b p-4 text-left font-semibold text-gray-600">Title</th>
                            <th class="border-b p-4 text-left font-semibold text-gray-600">Amount</th>
                            <th class="border-b p-4 text-left font-semibold text-gray-600">Tag</th>
                            <th class="border-b p-4 text-left font-semibold text-gray-600">Date</th>
                            <th class="border-b p-4 text-left font-semibold text-gray-600">Note</th>
                            <th class="border-b p-4 text-left font-semibold text-gray-600">Due Date</th>
                            <th class="border-b p-4 text-left font-semibold text-gray-600">Source</th>
                            <th class="border-b p-4 text-left font-semibold text-gray-600">Status</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        @foreach (var debtTransaction in filteredPendingDebts)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="p-4">@debtTransaction.Title</td>
                                <td class="p-4">@debtTransaction.Amount</td>
                                <td class="p-4">@debtTransaction.Tag</td>
                                <td class="p-4">@debtTransaction.Date</td>
                                <td class="p-4">@debtTransaction.Note</td>
                                <td class="p-4">@debtTransaction.DueDate</td>
                                <td class="p-4">@debtTransaction.Source</td>
                                <td class="p-4">
                                    <div>
                                        <span class="@(debtTransaction.IsCleared ? "text-green-600" : "text-yellow-600") font-semibold">
                                            @(debtTransaction.IsCleared ? "Cleared" : "Pending")
                                        </span>
                                        @if (!debtTransaction.IsCleared)
                                        {
                                            <button class="ml-2 rounded-lg bg-green-500 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-green-600"
                                                    @onclick="() => ClearDebt(debtTransaction.Id)">
                                                Clear Debt
                                            </button>
                                            <span class="mt-1 block text-red-600">@error_message</span>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-gray-500">No pending debts for the selected date range.</p>
        }
    </div>

   
</div>

@code {
    private double income { get; set; } = 0;
    private double expense { get; set; } = 0;
    private double debt { get; set; } = 0;
    private double balance { get; set; } = 0; // Corrected balance calculation
    private double clearedDebt { get; set; } = 0;
    private double pendingDebt { get; set; } = 0;
    private double allTotalTransactionsAmount { get; set; } = 0;

    private UserTransaction highestInflow { get; set; }
    private UserTransaction lowestOutflow { get; set; }
    private UserTransaction lowestInflow { get; set; }
    private UserTransaction highestOutflow { get; set; }
    private UserTransaction lowestDebt { get; set; }
    private UserTransaction highestDebt { get; set; }
    private int totalTransactions { get; set; } = 0;



    private List<UserTransaction> transactions { get; set; } = new();
    private string error_message { get; set; } = string.Empty;

    private DateTime? startDate { get; set; }
    private DateTime? endDate { get; set; }

    private List<UserTransaction> filteredPendingDebts => transactions
        .Where(t => t.TransactionType == "debt" && !t.IsCleared)
        .Where(t => (!startDate.HasValue || t.Date >= startDate) && (!endDate.HasValue || t.Date <= endDate))
        .ToList();


    protected override async Task OnInitializedAsync()
    {
        await LoadTransactionsAsync();
        try
        {
            
        }
        catch (Exception ex)
        {
            error_message = $"Error: {ex.Message}";
        }

        // Calculate totals
        income = transactions
            .Where(t => t.TransactionType == "income")
            .Sum(t => t.Amount);

        expense = transactions
            .Where(t => t.TransactionType == "expense")
            .Sum(t => t.Amount);

        debt = transactions
            .Where(t => t.TransactionType == "debt")
            .Sum(t => t.Amount);

        clearedDebt = transactions
            .Where(t => t.TransactionType == "debt" && t.IsCleared)
            .Sum(t => t.Amount);

        pendingDebt = transactions
            .Where(t => t.TransactionType == "debt" && !t.IsCleared)
            .Sum(t => t.Amount);

        // Total Transactions
        allTotalTransactionsAmount = income + debt + expense;

        // Corrected Balance Calculation
        balance = Utils.Balance();

        // Highest/Lowest Transactions
        highestInflow = transactions
            .Where(t => t.TransactionType == "income")
            .OrderByDescending(t => t.Amount)
            .FirstOrDefault();

        lowestOutflow = transactions
            .Where(t => t.TransactionType == "expense")
            .OrderBy(t => t.Amount)
            .FirstOrDefault();
        //highest outflow
        highestOutflow = transactions
       .Where(t => t.TransactionType == "expense")
       .OrderByDescending(t => t.Amount)
       .FirstOrDefault();

        //for lowest inflow of 
        lowestInflow = transactions
            .Where(t => t.TransactionType == "income")
            .OrderBy(t => t.Amount)
            .FirstOrDefault();

        //for lowest debt 
        lowestDebt = transactions
            .Where(t => t.TransactionType == "debt")
            .OrderBy(t => t.Amount)
            .FirstOrDefault();

        //for highest debt
        // Corrected highest debt logic
        highestDebt = transactions
            .Where(t => t.TransactionType == "debt")
            .OrderByDescending(t => t.Amount)
            .FirstOrDefault();

        totalTransactions = transactions.Count();
        Debug.WriteLine(totalTransactions);
    }


    private async Task LoadTransactionsAsync()
    {
        transactions = Utils.GetTransaction();
    }


    private async Task SaveTransactionsToFileAsync()
    {
        try
        {
            var serializedData = transactions.Select(t => JsonSerializer.Serialize(t));
            await File.WriteAllLinesAsync(Utils.TRANSACTIONS, serializedData);
        }
        catch (Exception ex)
        {
            error_message = $"Error saving transactions: {ex.Message}";
        }
    }
   
    private async Task ClearDebt(Guid debtId)
    {
        try
        {
            // Find the debt transaction by its ID
            var debtTransaction = transactions.FirstOrDefault(t => t.Id == debtId);

            if (debtTransaction != null && debtTransaction.TransactionType == "debt" && !debtTransaction.IsCleared)
            {
                // Check if there is enough balance to clear the debt
                if (balance >= debtTransaction.Amount)
                {
                    // Store the original debt amount
                    var debtAmount = debtTransaction.Amount;

                    // Mark the debt as cleared
                    debtTransaction.IsCleared = true;
                    debtTransaction.Amount = debtTransaction.Amount; // Set the amount to 0 after clearing
                    // Save updated transactions to the file
                    await SaveTransactionsToFileAsync();

                    // Recalculate income, expense, debt, and balance
                    income = transactions
                        .Where(t => t.TransactionType == "income")
                        .Sum(t => t.Amount);

                    expense = transactions
                        .Where(t => t.TransactionType == "expense")
                        .Sum(t => t.Amount);

                    var remainingDebt = transactions
                    .Where(t => t.TransactionType == "debt" && !t.IsCleared)
                        .Sum(t => t.Amount);

                    balance = income + remainingDebt - expense;

                    clearedDebt = transactions
          .Where(t => t.TransactionType == "debt" && t.IsCleared)
          .Sum(t => t.Amount);

                    pendingDebt = transactions
                        .Where(t => t.TransactionType == "debt" && !t.IsCleared)
                        .Sum(t => t.Amount);

                    error_message = $"Debt '{debtTransaction.Title}' cleared successfully!";
                }
                else
                {
                    error_message = "Insufficient balance to clear this debt.";
                }
            }
            else
            {
                error_message = "Debt not found or already cleared.";
            }
        }
        catch (Exception ex)
        {
            error_message = $"Error clearing debt: {ex.Message}";
        }
    }
}
