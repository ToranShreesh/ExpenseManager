@page "/income"
@using ExpenseManager.Components.Layout
@using Components.Model;
@using System.Text.Json;
@using Components.Utilities;
@using System.Linq
@using System;

<div class="mt-10 w-full min-h-screen p-4 flex flex-col">
        <h3 class="mb-4 text-xl font-bold">Income List</h3>

        <!-- Filter UI -->
        <div class="mb-4">
            @* <label for="transactionType" class="mr-2">Transaction Type:</label>
            <select @bind="selectedTransactionType" id="transactionType" class="rounded border p-1">
                <option value="">All</option>
                <option value="income">Income</option>
                <option value="expense">Expense</option>
                <option value="debt">Debt</option>
            </select> *@

            <label for="tag" class="ml-4 mr-2">Tag:</label>
            <select @bind="selectedTag" id="tag" class="rounded border p-1">
                <option value="">All</option>
                <option value="Salary">Salary</option>
                <option value="Groceries">Groceries</option>
                <option value="Rent">Rent</option>
                <option value="Miscellaneous">Miscellaneous</option>
                <!-- Add more tags here as needed -->
            </select>

            <label for="dateRange" class="ml-4 mr-2">Date Range:</label>
            <input type="date" @bind="startDate" class="rounded border p-1">
            <input type="date" @bind="endDate" class="ml-2 rounded border p-1">

            <!-- Search Input -->
            <input type="text" @bind="searchTitle" placeholder="Search by Title" class="ml-4 rounded border p-1">
        </div>

        <!-- Sorting Controls -->
        <div class="mb-4">
            <button @onclick="SortByDateAscending" class="rounded border bg-blue-500 p-2 text-white">Sort by Date (Ascending)</button>
            <button @onclick="SortByDateDescending" class="ml-2 rounded border bg-blue-500 p-2 text-white">Sort by Date (Descending)</button>
        </div>

        @if (FilteredTransactions.Any())
        {
            <table class="w-full table-auto border-collapse border border-gray-300">
                <thead class="bg-blue-700 text-white">
                    <tr>
                        <th class="border border-gray-300 px-4 py-2">Title</th>
                        <th class="border border-gray-300 px-4 py-2">Amount</th>
                        <th class="border border-gray-300 px-4 py-2">Type</th>
                        <th class="border border-gray-300 px-4 py-2">Tag</th>
                        <th class="border border-gray-300 px-4 py-2">Date</th>
                        <th class="border border-gray-300 px-4 py-2">Note</th>
                    
                    </tr>
                </thead>
                <tbody>
                    @foreach (var each in FilteredTransactions)
                    {
                        <tr class="text-center hover:bg-gray-100">
                            <td class="border border-gray-300 px-4 py-2">@each.Title</td>
                            <td class="border border-gray-300 px-4 py-2">@each.Amount</td>
                            <td class="border border-gray-300 px-4 py-2">@each.TransactionType</td>
                            <td class="border border-gray-300 px-4 py-2">@each.Tag</td>
                            <td class="border border-gray-300 px-4 py-2">@each.Date.ToShortDateString()</td>
                            <td class="border border-gray-300 px-4 py-2">@each.Note</td>
                           
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p class="text-black">No transactions available.</p>
        }
    </div>

@code {
    private List<UserTransaction> transactions { get; set; } = new();
    private string error_message { get; set; } = string.Empty;

    // Filter properties
    private string selectedTransactionType { get; set; } = "income";
    private string selectedTag { get; set; } = "";
    private DateTime? startDate { get; set; } = null;
    private DateTime? endDate { get; set; } = null;
    private string searchTitle { get; set; } = "";

    private IEnumerable<UserTransaction> FilteredTransactions
    {
        get
        {
            var filtered = transactions.AsEnumerable();

            // Apply transaction type filter
            if (!string.IsNullOrEmpty(selectedTransactionType))
            {
                filtered = filtered.Where(t => t.TransactionType.Equals(selectedTransactionType, StringComparison.OrdinalIgnoreCase));
            }

            // Apply tag filter
            if (!string.IsNullOrEmpty(selectedTag))
            {
                filtered = filtered.Where(t => t.Tag.Equals(selectedTag, StringComparison.OrdinalIgnoreCase));
            }

            // Apply date range filter
            if (startDate.HasValue && endDate.HasValue)
            {
                filtered = filtered.Where(t => t.Date >= startDate.Value && t.Date <= endDate.Value);
            }

            // Apply search by title filter
            if (!string.IsNullOrEmpty(searchTitle))
            {
                filtered = filtered.Where(t => t.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase));
            }

            return filtered;
        }
    }

    // Sorting methods
    private void SortByDateAscending()
    {
        transactions = transactions.OrderBy(t => t.Date).ToList();
    }

    private void SortByDateDescending()
    {
        transactions = transactions.OrderByDescending(t => t.Date).ToList();
    }

    private async Task LoadTransactionsFromFileAsync()
    {
        try
        {
            if (File.Exists(Utils.TRANSACTIONS))
            {
                var lines = await File.ReadAllLinesAsync(Utils.TRANSACTIONS); // Async read

                transactions = lines
                    .Select(line => JsonSerializer.Deserialize<UserTransaction>(line))
                    .Where(transaction => transaction != null)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            error_message = $"Error reading transactions: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactionsFromFileAsync();
    }

   


    private async Task SaveTransactionsToFileAsync()
    {
        try
        {
            var serializedData = transactions.Select(t => JsonSerializer.Serialize(t));
            await File.WriteAllLinesAsync(Utils.TRANSACTIONS, serializedData);
        }
        catch (Exception ex)
        {
            error_message = $"Error saving transactions: {ex.Message}";
        }
    }
}
