@page "/addDebt"
@using ExpenseManager.Components.Layout
@using Components.Model;
@using System.Text.Json;
@using Components.Utilities;

<div class="flex">

    <form method="post" @onsubmit="TransactionHandler" class="w-full">
        <div class="ml-20 flex flex-col space-y-2 pl-16 pr-16">
            <h1 class="text-xl font-semibold">Add Debt</h1>

            <!-- Use space-y-4 for spacing between labels -->
            <label class="flex flex-col">
                <h2 class="text-xl font-semibold">Title</h2>
                <input required type="text" placeholder="Title" @bind="Title" class="mt-1 rounded border p-2" />
            </label>

            <label class="flex flex-col">
                <h2 class="text-xl font-semibold">Amount</h2>
                <input required type="number" placeholder="Amount" @bind="Amount" class="mt-1 rounded border p-2" />
            </label>

            @* <label class="flex flex-col"> *@
            @*     <h2 class="text-xl font-semibold">Transaction type</h2> *@

            @*     <select @bind="TransactionType" class="mt-1 rounded border p-2"> *@
            @*         <option value="income">Income</option> *@
            @*         <option value="expense">Expense</option> *@
            @*         <option value="debt">Debt</option> *@
            @*     </select> *@
            @* </label> *@

            <label class="flex flex-col">
                <h2 class="text-xl font-semibold">Tag</h2>
                <select @bind="Tag" class="mt-1 rounded border p-2">
                    <option value="Food">Food</option>
                    <option value="Yearly">Yearly</option>
                    <option value="Monthly">Monthly</option>
                    <option value="Drinks">Drinks</option>
                    <option value="Clothes">Clothes</option>
                    <option value="Gadgets">Gadgets</option>
                    <option value="Miscellaneous">Miscellaneous</option>
                    <option value="Fuel">Fuel</option>
                    <option value="Rent">Rent</option>
                    <option value="EMI">EMI</option>
                    <option value="Party">Party</option>

                    @foreach (var tag in tags)
                    {
                        <option value="@tag">@tag</option>
                    }
                </select>
            </label>

            <label class="flex flex-col">
                <h2 class="text-xl font-semibold">Date</h2>

                <input type="date" @bind="Date" class="mt-1 rounded border p-2" />
            </label>

            <label class="flex flex-col">
                <h2 class="text-xl font-semibold">Note</h2>

                <input type="text" placeholder="Note" @bind="Note" class="mt-1 rounded border p-2" />
            </label>

            @if (TransactionType == "debt")
            {
                <label class="flex flex-col">
                    <h2 class="text-xl font-semibold">Due Date</h2>
                    <input type="date" placeholder="Due Date" @bind="DueDate" class="mt-1 rounded border p-2" />
                </label>

                <label class="flex flex-col">
                    <h2 class="text-xl font-semibold">Source</h2>

                    <input type="text" placeholder="Source (e.g., Bank, Lender)" @bind="Source" class="mt-1 rounded border p-2" />
                </label>
            }

            <button class="rounded bg-blue-600 px-4 py-2 text-white" type="submit">Add Debt</button>
        </div>

        <p class="mt-2 text-red-500">@error_message</p>
    </form>
</div>


@code {
    private string? Title { get; set; }
    private double Amount { get; set; } = 0.0;
    private string? TransactionType { get; set; } = "debt";
    private string? Tag { get; set; } = "Other";
    private DateTime Date { get; set; } = DateTime.Now;
    private string? Note { get; set; } = string.Empty;
    private DateTime? DueDate { get; set; }
    private string? Source { get; set; }
    private string error_message { get; set; } = string.Empty;
    private List<UserTransaction> transactions { get; set; } = new();
    private double balance { get; set; }

    private List<string> tags = new List<string>();
    protected override void OnInitialized()
    {
        LoadTags();
    }

    private void LoadTags()
    {
        balance = Utils.Balance();
        tags = Utils.GetTags();
    }

    private async Task TransactionHandler()
    {
        try
        {
            UserTransaction transaction;

            if (TransactionType == "debt")
            {
                // Ensure debt-specific fields are filled
                if (!DueDate.HasValue)
                {
                    throw new Exception("Due date is required for debts.");
                }

                if (string.IsNullOrEmpty(Source))
                {
                    throw new Exception("Source is required for debts.");
                }

                transaction = new UserTransaction(Title, Amount, TransactionType, Tag, Date, Note, DueDate, Source);
            }
            else
            {
                // Create non-debt transactions
                transaction = new UserTransaction(Title, Amount, TransactionType, Tag, Date, Note);
            }

            string json = JsonSerializer.Serialize(transaction);
            await File.AppendAllTextAsync(Utils.TRANSACTIONS, json + Environment.NewLine);

            await LoadTransactionsFromFile();

            // Reset form fields
            Title = string.Empty;
            Amount = 0;
            TransactionType = "debt";
            Tag = "Other";
            Date = DateTime.Now;
            Note = string.Empty;
            DueDate = null;
            Source = null;
            error_message = string.Empty;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            error_message = ex.Message;
        }
    }

    private async Task LoadTransactionsFromFile()
    {
        try
        {
            if (File.Exists(Utils.TRANSACTIONS))
            {
                var lines = await File.ReadAllLinesAsync(Utils.TRANSACTIONS);

                transactions = lines.Select(line => JsonSerializer.Deserialize<UserTransaction>(line))
                    .Where(transaction => transaction != null)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            error_message = $"Error reading transactions: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactionsFromFile();
    }

}
