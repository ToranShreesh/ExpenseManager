@page "/debt"
@using ExpenseManager.Components.Layout
@using Components.Model;
@using System.Text.Json;
@using Components.Utilities;
@using System.Linq
@using System;

<div class="mt-10 w-full min-h-screen p-4 flex flex-col">
    <h3 class="mb-4 text-xl font-bold">Debt List</h3>

    <!-- Filter UI -->
    <div class="mb-4">
        @* <label for="transactionType" class="mr-2">Transaction Type:</label>
            <select @bind="selectedTransactionType" id="transactionType" class="rounded border p-1">
                <option value="">All</option>
                <option value="income">Income</option>
                <option value="expense">Expense</option>
                <option value="debt">Debt</option>
            </select> *@

        <label for="tag" class="ml-4 mr-2">Tag:</label>
        <select @bind="selectedTag" id="tag" class="rounded border p-1">
            <option value="">All</option>
            <option value="Salary">Salary</option>
            <option value="Groceries">Groceries</option>
            <option value="Rent">Rent</option>
            <option value="Miscellaneous">Miscellaneous</option>
            <!-- Add more tags here as needed -->
        </select>

        <label for="dateRange" class="ml-4 mr-2">Date Range:</label>
        <input type="date" @bind="startDate" class="rounded border p-1">
        <input type="date" @bind="endDate" class="ml-2 rounded border p-1">

        <!-- Search Input -->
        <input type="text" @bind="searchTitle" placeholder="Search by Title" class="ml-4 rounded border p-1">
    </div>

    <!-- Sorting Controls -->
    <div class="mb-4">
        <button @onclick="SortByDateAscending" class="rounded border bg-blue-500 p-2 text-white">Sort by Date (Ascending)</button>
        <button @onclick="SortByDateDescending" class="ml-2 rounded border bg-blue-500 p-2 text-white">Sort by Date (Descending)</button>
    </div>

    @if (FilteredTransactions.Any())
    {
        <table class="w-full table-auto border-collapse border border-gray-300">
            <thead class="bg-blue-700 text-white">
                <tr>
                    <th class="border border-gray-300 px-4 py-2">Title</th>
                    <th class="border border-gray-300 px-4 py-2">Amount</th>
                    <th class="border border-gray-300 px-4 py-2">Type</th>
                    <th class="border border-gray-300 px-4 py-2">Tag</th>
                    <th class="border border-gray-300 px-4 py-2">Date</th>
                    <th class="border border-gray-300 px-4 py-2">Note</th>
                    <th class="border border-gray-300 px-4 py-2">Additional Info</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var each in FilteredTransactions)
                {
                    <tr class="@((each.TransactionType == "debt" && !each.IsCleared) ? "bg-blue-100" : "text-center hover:bg-gray-100")">
                        <td class="border border-gray-300 px-4 py-2">@each.Title</td>
                        <td class="border border-gray-300 px-4 py-2">@each.Amount</td>
                        <td class="border border-gray-300 px-4 py-2">@each.TransactionType</td>
                        <td class="border border-gray-300 px-4 py-2">@each.Tag</td>
                        <td class="border border-gray-300 px-4 py-2">@each.Date.ToShortDateString()</td>
                        <td class="border border-gray-300 px-4 py-2">@each.Note</td>

                        <td class="border border-gray-300 px-4 py-2">
                            @if (each.TransactionType == "debt")
                            {
                                <div>
                                    <b>Due Date:</b> @each.DueDate?.ToShortDateString() <br />
                                    <b>Source:</b> @each.Source <br />
                                    <b>Status:</b> @(each.IsCleared ? "Cleared" : "Pending") <br />
                                    @if (!each.IsCleared)
                                    {
                                        <button class="rounded bg-green-500 px-2 py-1 text-white"
                                                @onclick="() => ClearDebt(each.Id)">
                                            Clear Debt
                                        </button>
                                        <span class="text-red-700">@error_message</span>
                                    }
                                </div>
                            }
                        </td>


                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-black">No transactions available.</p>
    }
</div>

@code {
    private List<UserTransaction> transactions { get; set; } = new();
    private string error_message { get; set; } = string.Empty;

    // Filter properties
    private string selectedTransactionType { get; set; } = "debt";
    private string selectedTag { get; set; } = "";
    private string ErrorMessage { get; set; }
    private DateTime? startDate { get; set; } = null;
    private DateTime? endDate { get; set; } = null;
    private string searchTitle { get; set; } = "";
    private double balance = 0;

    private IEnumerable<UserTransaction> FilteredTransactions
    {
        get
        {
            var filtered = transactions.AsEnumerable();

            // Apply transaction type filter
            if (!string.IsNullOrEmpty(selectedTransactionType))
            {
                filtered = filtered.Where(t => t.TransactionType.Equals(selectedTransactionType, StringComparison.OrdinalIgnoreCase));
            }

            // Apply tag filter
            if (!string.IsNullOrEmpty(selectedTag))
            {
                filtered = filtered.Where(t => t.Tag.Equals(selectedTag, StringComparison.OrdinalIgnoreCase));
            }

            // Apply date range filter
            if (startDate.HasValue && endDate.HasValue)
            {
                filtered = filtered.Where(t => t.Date >= startDate.Value && t.Date <= endDate.Value);
            }

            // Apply search by title filter
            if (!string.IsNullOrEmpty(searchTitle))
            {
                filtered = filtered.Where(t => t.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase));
            }

            return filtered;
        }
    }

    // Sorting methods
    private void SortByDateAscending()
    {
        transactions = transactions.OrderBy(t => t.Date).ToList();
    }

    private void SortByDateDescending()
    {
        transactions = transactions.OrderByDescending(t => t.Date).ToList();
    }

    private async Task LoadTransactionsFromFileAsync()
    {
        try
        {
            if (File.Exists(Utils.TRANSACTIONS))
            {
                var lines = await File.ReadAllLinesAsync(Utils.TRANSACTIONS); // Async read

                transactions = lines
                    .Select(line => JsonSerializer.Deserialize<UserTransaction>(line))
                    .Where(transaction => transaction != null)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            error_message = $"Error reading transactions: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactionsFromFileAsync();
    }

    private async Task ClearDebt(Guid debtId)
    {
        try
        {
            // Find the debt transaction by its ID
            var debt = transactions.FirstOrDefault(t => t.Id == debtId);

            if (debt != null && debt.TransactionType == "debt" && !debt.IsCleared)
            {
                // Check if there is enough balance to clear the debt
                if (balance >= debt.Amount)
                {
                    // Store the original debt amount
                    var debtAmount = debt.Amount;

                    // debt as cleared
                    debt.IsCleared = true;
                    debt.Amount = debt.Amount;  // Set the amount to 0 after clearing


                    // Save updated transactions to the file
                    await SaveTransactionsToFileAsync();
                    error_message = $"Debt '{debt.Title}' cleared successfully!";
                    StateHasChanged();
                }
                else
                {
                    error_message = "Insufficient balance to clear this debt.";
                }
            }
        }
        catch (Exception ex)
        {
            error_message = $"Error clearing debt: {ex.Message}";
        }
    }
    private async Task SaveTransactionsToFileAsync()
    {
        try
        {
            var serializedData = transactions.Select(t => JsonSerializer.Serialize(t));
            await File.WriteAllLinesAsync(Utils.TRANSACTIONS, serializedData);
        }
        catch (Exception ex)
        {
            error_message = $"Error saving transactions: {ex.Message}";
        }
    }
}
}
   
